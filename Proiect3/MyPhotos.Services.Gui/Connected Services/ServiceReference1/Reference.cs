//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyPhotos.DataAccess.Gui.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Event", Namespace="http://schemas.datacontract.org/2004/07/MyPhotos.DataAccess.Model.Models", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Event : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyPhotos.DataAccess.Gui.ServiceReference1.Photos[] PhotosField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyPhotos.DataAccess.Gui.ServiceReference1.Photos[] Photos {
            get {
                return this.PhotosField;
            }
            set {
                if ((object.ReferenceEquals(this.PhotosField, value) != true)) {
                    this.PhotosField = value;
                    this.RaisePropertyChanged("Photos");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Photos", Namespace="http://schemas.datacontract.org/2004/07/MyPhotos.DataAccess.Model.Models", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Photos : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyPhotos.DataAccess.Gui.ServiceReference1.Event EventField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyPhotos.DataAccess.Gui.ServiceReference1.Person[] PeopleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyPhotos.DataAccess.Gui.ServiceReference1.Places[] PlacesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyPhotos.DataAccess.Gui.ServiceReference1.Type[] TypesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyPhotos.DataAccess.Gui.ServiceReference1.Event Event {
            get {
                return this.EventField;
            }
            set {
                if ((object.ReferenceEquals(this.EventField, value) != true)) {
                    this.EventField = value;
                    this.RaisePropertyChanged("Event");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeleted {
            get {
                return this.IsDeletedField;
            }
            set {
                if ((this.IsDeletedField.Equals(value) != true)) {
                    this.IsDeletedField = value;
                    this.RaisePropertyChanged("IsDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path {
            get {
                return this.PathField;
            }
            set {
                if ((object.ReferenceEquals(this.PathField, value) != true)) {
                    this.PathField = value;
                    this.RaisePropertyChanged("Path");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyPhotos.DataAccess.Gui.ServiceReference1.Person[] People {
            get {
                return this.PeopleField;
            }
            set {
                if ((object.ReferenceEquals(this.PeopleField, value) != true)) {
                    this.PeopleField = value;
                    this.RaisePropertyChanged("People");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyPhotos.DataAccess.Gui.ServiceReference1.Places[] Places {
            get {
                return this.PlacesField;
            }
            set {
                if ((object.ReferenceEquals(this.PlacesField, value) != true)) {
                    this.PlacesField = value;
                    this.RaisePropertyChanged("Places");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyPhotos.DataAccess.Gui.ServiceReference1.Type[] Types {
            get {
                return this.TypesField;
            }
            set {
                if ((object.ReferenceEquals(this.TypesField, value) != true)) {
                    this.TypesField = value;
                    this.RaisePropertyChanged("Types");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Person", Namespace="http://schemas.datacontract.org/2004/07/MyPhotos.DataAccess.Model.Models", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Person : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyPhotos.DataAccess.Gui.ServiceReference1.Photos[] PhotosField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyPhotos.DataAccess.Gui.ServiceReference1.Photos[] Photos {
            get {
                return this.PhotosField;
            }
            set {
                if ((object.ReferenceEquals(this.PhotosField, value) != true)) {
                    this.PhotosField = value;
                    this.RaisePropertyChanged("Photos");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Places", Namespace="http://schemas.datacontract.org/2004/07/MyPhotos.DataAccess.Model.Models", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Places : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyPhotos.DataAccess.Gui.ServiceReference1.Photos[] PhotosField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyPhotos.DataAccess.Gui.ServiceReference1.Photos[] Photos {
            get {
                return this.PhotosField;
            }
            set {
                if ((object.ReferenceEquals(this.PhotosField, value) != true)) {
                    this.PhotosField = value;
                    this.RaisePropertyChanged("Photos");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Type", Namespace="http://schemas.datacontract.org/2004/07/MyPhotos.DataAccess.Model.Models", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Type : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MyPhotos.DataAccess.Gui.ServiceReference1.Photos[] PhotosField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyPhotos.DataAccess.Gui.ServiceReference1.Photos[] Photos {
            get {
                return this.PhotosField;
            }
            set {
                if ((object.ReferenceEquals(this.PhotosField, value) != true)) {
                    this.PhotosField = value;
                    this.RaisePropertyChanged("Photos");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IServiceImplementation")]
    public interface IServiceImplementation {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/AddEvent", ReplyAction="http://tempuri.org/IServiceImplementation/AddEventResponse")]
        void AddEvent(MyPhotos.DataAccess.Gui.ServiceReference1.Event entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/AddEvent", ReplyAction="http://tempuri.org/IServiceImplementation/AddEventResponse")]
        System.Threading.Tasks.Task AddEventAsync(MyPhotos.DataAccess.Gui.ServiceReference1.Event entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/GetAllEvents", ReplyAction="http://tempuri.org/IServiceImplementation/GetAllEventsResponse")]
        MyPhotos.DataAccess.Gui.ServiceReference1.Event[] GetAllEvents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/GetAllEvents", ReplyAction="http://tempuri.org/IServiceImplementation/GetAllEventsResponse")]
        System.Threading.Tasks.Task<MyPhotos.DataAccess.Gui.ServiceReference1.Event[]> GetAllEventsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/GetEventById", ReplyAction="http://tempuri.org/IServiceImplementation/GetEventByIdResponse")]
        MyPhotos.DataAccess.Gui.ServiceReference1.Event GetEventById(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/GetEventById", ReplyAction="http://tempuri.org/IServiceImplementation/GetEventByIdResponse")]
        System.Threading.Tasks.Task<MyPhotos.DataAccess.Gui.ServiceReference1.Event> GetEventByIdAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/UpdateEvent", ReplyAction="http://tempuri.org/IServiceImplementation/UpdateEventResponse")]
        void UpdateEvent(MyPhotos.DataAccess.Gui.ServiceReference1.Event oldEntity, MyPhotos.DataAccess.Gui.ServiceReference1.Event newEntity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/UpdateEvent", ReplyAction="http://tempuri.org/IServiceImplementation/UpdateEventResponse")]
        System.Threading.Tasks.Task UpdateEventAsync(MyPhotos.DataAccess.Gui.ServiceReference1.Event oldEntity, MyPhotos.DataAccess.Gui.ServiceReference1.Event newEntity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/DeleteEvent", ReplyAction="http://tempuri.org/IServiceImplementation/DeleteEventResponse")]
        void DeleteEvent(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/DeleteEvent", ReplyAction="http://tempuri.org/IServiceImplementation/DeleteEventResponse")]
        System.Threading.Tasks.Task DeleteEventAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/AddPerson", ReplyAction="http://tempuri.org/IServiceImplementation/AddPersonResponse")]
        void AddPerson(MyPhotos.DataAccess.Gui.ServiceReference1.Person entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/AddPerson", ReplyAction="http://tempuri.org/IServiceImplementation/AddPersonResponse")]
        System.Threading.Tasks.Task AddPersonAsync(MyPhotos.DataAccess.Gui.ServiceReference1.Person entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/GetAllPersons", ReplyAction="http://tempuri.org/IServiceImplementation/GetAllPersonsResponse")]
        MyPhotos.DataAccess.Gui.ServiceReference1.Person[] GetAllPersons();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/GetAllPersons", ReplyAction="http://tempuri.org/IServiceImplementation/GetAllPersonsResponse")]
        System.Threading.Tasks.Task<MyPhotos.DataAccess.Gui.ServiceReference1.Person[]> GetAllPersonsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/GetPersonById", ReplyAction="http://tempuri.org/IServiceImplementation/GetPersonByIdResponse")]
        MyPhotos.DataAccess.Gui.ServiceReference1.Person GetPersonById(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/GetPersonById", ReplyAction="http://tempuri.org/IServiceImplementation/GetPersonByIdResponse")]
        System.Threading.Tasks.Task<MyPhotos.DataAccess.Gui.ServiceReference1.Person> GetPersonByIdAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/UpdatePerson", ReplyAction="http://tempuri.org/IServiceImplementation/UpdatePersonResponse")]
        void UpdatePerson(MyPhotos.DataAccess.Gui.ServiceReference1.Person oldEntity, MyPhotos.DataAccess.Gui.ServiceReference1.Person newEntity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/UpdatePerson", ReplyAction="http://tempuri.org/IServiceImplementation/UpdatePersonResponse")]
        System.Threading.Tasks.Task UpdatePersonAsync(MyPhotos.DataAccess.Gui.ServiceReference1.Person oldEntity, MyPhotos.DataAccess.Gui.ServiceReference1.Person newEntity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/DeletePerson", ReplyAction="http://tempuri.org/IServiceImplementation/DeletePersonResponse")]
        void DeletePerson(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/DeletePerson", ReplyAction="http://tempuri.org/IServiceImplementation/DeletePersonResponse")]
        System.Threading.Tasks.Task DeletePersonAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/AddPhoto", ReplyAction="http://tempuri.org/IServiceImplementation/AddPhotoResponse")]
        void AddPhoto(MyPhotos.DataAccess.Gui.ServiceReference1.Photos entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/AddPhoto", ReplyAction="http://tempuri.org/IServiceImplementation/AddPhotoResponse")]
        System.Threading.Tasks.Task AddPhotoAsync(MyPhotos.DataAccess.Gui.ServiceReference1.Photos entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/GetAllPhotos", ReplyAction="http://tempuri.org/IServiceImplementation/GetAllPhotosResponse")]
        MyPhotos.DataAccess.Gui.ServiceReference1.Photos[] GetAllPhotos();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/GetAllPhotos", ReplyAction="http://tempuri.org/IServiceImplementation/GetAllPhotosResponse")]
        System.Threading.Tasks.Task<MyPhotos.DataAccess.Gui.ServiceReference1.Photos[]> GetAllPhotosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/GetPhotoById", ReplyAction="http://tempuri.org/IServiceImplementation/GetPhotoByIdResponse")]
        MyPhotos.DataAccess.Gui.ServiceReference1.Photos GetPhotoById(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/GetPhotoById", ReplyAction="http://tempuri.org/IServiceImplementation/GetPhotoByIdResponse")]
        System.Threading.Tasks.Task<MyPhotos.DataAccess.Gui.ServiceReference1.Photos> GetPhotoByIdAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/UpdatePhoto", ReplyAction="http://tempuri.org/IServiceImplementation/UpdatePhotoResponse")]
        void UpdatePhoto(MyPhotos.DataAccess.Gui.ServiceReference1.Photos oldEntity, MyPhotos.DataAccess.Gui.ServiceReference1.Photos newEntity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/UpdatePhoto", ReplyAction="http://tempuri.org/IServiceImplementation/UpdatePhotoResponse")]
        System.Threading.Tasks.Task UpdatePhotoAsync(MyPhotos.DataAccess.Gui.ServiceReference1.Photos oldEntity, MyPhotos.DataAccess.Gui.ServiceReference1.Photos newEntity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/DeletePhoto", ReplyAction="http://tempuri.org/IServiceImplementation/DeletePhotoResponse")]
        void DeletePhoto(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/DeletePhoto", ReplyAction="http://tempuri.org/IServiceImplementation/DeletePhotoResponse")]
        System.Threading.Tasks.Task DeletePhotoAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/AddPlace", ReplyAction="http://tempuri.org/IServiceImplementation/AddPlaceResponse")]
        void AddPlace(MyPhotos.DataAccess.Gui.ServiceReference1.Places entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/AddPlace", ReplyAction="http://tempuri.org/IServiceImplementation/AddPlaceResponse")]
        System.Threading.Tasks.Task AddPlaceAsync(MyPhotos.DataAccess.Gui.ServiceReference1.Places entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/GetAllPlaces", ReplyAction="http://tempuri.org/IServiceImplementation/GetAllPlacesResponse")]
        MyPhotos.DataAccess.Gui.ServiceReference1.Places[] GetAllPlaces();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/GetAllPlaces", ReplyAction="http://tempuri.org/IServiceImplementation/GetAllPlacesResponse")]
        System.Threading.Tasks.Task<MyPhotos.DataAccess.Gui.ServiceReference1.Places[]> GetAllPlacesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/GetPlaceById", ReplyAction="http://tempuri.org/IServiceImplementation/GetPlaceByIdResponse")]
        MyPhotos.DataAccess.Gui.ServiceReference1.Places GetPlaceById(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/GetPlaceById", ReplyAction="http://tempuri.org/IServiceImplementation/GetPlaceByIdResponse")]
        System.Threading.Tasks.Task<MyPhotos.DataAccess.Gui.ServiceReference1.Places> GetPlaceByIdAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/UpdatePlace", ReplyAction="http://tempuri.org/IServiceImplementation/UpdatePlaceResponse")]
        void UpdatePlace(MyPhotos.DataAccess.Gui.ServiceReference1.Places oldEntity, MyPhotos.DataAccess.Gui.ServiceReference1.Places newEntity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/UpdatePlace", ReplyAction="http://tempuri.org/IServiceImplementation/UpdatePlaceResponse")]
        System.Threading.Tasks.Task UpdatePlaceAsync(MyPhotos.DataAccess.Gui.ServiceReference1.Places oldEntity, MyPhotos.DataAccess.Gui.ServiceReference1.Places newEntity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/DeletePlace", ReplyAction="http://tempuri.org/IServiceImplementation/DeletePlaceResponse")]
        void DeletePlace(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/DeletePlace", ReplyAction="http://tempuri.org/IServiceImplementation/DeletePlaceResponse")]
        System.Threading.Tasks.Task DeletePlaceAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/AddType", ReplyAction="http://tempuri.org/IServiceImplementation/AddTypeResponse")]
        void AddType(MyPhotos.DataAccess.Gui.ServiceReference1.Type entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/AddType", ReplyAction="http://tempuri.org/IServiceImplementation/AddTypeResponse")]
        System.Threading.Tasks.Task AddTypeAsync(MyPhotos.DataAccess.Gui.ServiceReference1.Type entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/GetAllTypes", ReplyAction="http://tempuri.org/IServiceImplementation/GetAllTypesResponse")]
        MyPhotos.DataAccess.Gui.ServiceReference1.Type[] GetAllTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/GetAllTypes", ReplyAction="http://tempuri.org/IServiceImplementation/GetAllTypesResponse")]
        System.Threading.Tasks.Task<MyPhotos.DataAccess.Gui.ServiceReference1.Type[]> GetAllTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/GetTypeById", ReplyAction="http://tempuri.org/IServiceImplementation/GetTypeByIdResponse")]
        MyPhotos.DataAccess.Gui.ServiceReference1.Type GetTypeById(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/GetTypeById", ReplyAction="http://tempuri.org/IServiceImplementation/GetTypeByIdResponse")]
        System.Threading.Tasks.Task<MyPhotos.DataAccess.Gui.ServiceReference1.Type> GetTypeByIdAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/UpdateType", ReplyAction="http://tempuri.org/IServiceImplementation/UpdateTypeResponse")]
        void UpdateType(MyPhotos.DataAccess.Gui.ServiceReference1.Type oldEntity, MyPhotos.DataAccess.Gui.ServiceReference1.Type newEntity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/UpdateType", ReplyAction="http://tempuri.org/IServiceImplementation/UpdateTypeResponse")]
        System.Threading.Tasks.Task UpdateTypeAsync(MyPhotos.DataAccess.Gui.ServiceReference1.Type oldEntity, MyPhotos.DataAccess.Gui.ServiceReference1.Type newEntity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/DeleteType", ReplyAction="http://tempuri.org/IServiceImplementation/DeleteTypeResponse")]
        void DeleteType(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImplementation/DeleteType", ReplyAction="http://tempuri.org/IServiceImplementation/DeleteTypeResponse")]
        System.Threading.Tasks.Task DeleteTypeAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceImplementationChannel : MyPhotos.DataAccess.Gui.ServiceReference1.IServiceImplementation, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceImplementationClient : System.ServiceModel.ClientBase<MyPhotos.DataAccess.Gui.ServiceReference1.IServiceImplementation>, MyPhotos.DataAccess.Gui.ServiceReference1.IServiceImplementation {
        
        public ServiceImplementationClient() {
        }
        
        public ServiceImplementationClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceImplementationClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceImplementationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceImplementationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddEvent(MyPhotos.DataAccess.Gui.ServiceReference1.Event entity) {
            base.Channel.AddEvent(entity);
        }
        
        public System.Threading.Tasks.Task AddEventAsync(MyPhotos.DataAccess.Gui.ServiceReference1.Event entity) {
            return base.Channel.AddEventAsync(entity);
        }
        
        public MyPhotos.DataAccess.Gui.ServiceReference1.Event[] GetAllEvents() {
            return base.Channel.GetAllEvents();
        }
        
        public System.Threading.Tasks.Task<MyPhotos.DataAccess.Gui.ServiceReference1.Event[]> GetAllEventsAsync() {
            return base.Channel.GetAllEventsAsync();
        }
        
        public MyPhotos.DataAccess.Gui.ServiceReference1.Event GetEventById(System.Guid id) {
            return base.Channel.GetEventById(id);
        }
        
        public System.Threading.Tasks.Task<MyPhotos.DataAccess.Gui.ServiceReference1.Event> GetEventByIdAsync(System.Guid id) {
            return base.Channel.GetEventByIdAsync(id);
        }
        
        public void UpdateEvent(MyPhotos.DataAccess.Gui.ServiceReference1.Event oldEntity, MyPhotos.DataAccess.Gui.ServiceReference1.Event newEntity) {
            base.Channel.UpdateEvent(oldEntity, newEntity);
        }
        
        public System.Threading.Tasks.Task UpdateEventAsync(MyPhotos.DataAccess.Gui.ServiceReference1.Event oldEntity, MyPhotos.DataAccess.Gui.ServiceReference1.Event newEntity) {
            return base.Channel.UpdateEventAsync(oldEntity, newEntity);
        }
        
        public void DeleteEvent(System.Guid id) {
            base.Channel.DeleteEvent(id);
        }
        
        public System.Threading.Tasks.Task DeleteEventAsync(System.Guid id) {
            return base.Channel.DeleteEventAsync(id);
        }
        
        public void AddPerson(MyPhotos.DataAccess.Gui.ServiceReference1.Person entity) {
            base.Channel.AddPerson(entity);
        }
        
        public System.Threading.Tasks.Task AddPersonAsync(MyPhotos.DataAccess.Gui.ServiceReference1.Person entity) {
            return base.Channel.AddPersonAsync(entity);
        }
        
        public MyPhotos.DataAccess.Gui.ServiceReference1.Person[] GetAllPersons() {
            return base.Channel.GetAllPersons();
        }
        
        public System.Threading.Tasks.Task<MyPhotos.DataAccess.Gui.ServiceReference1.Person[]> GetAllPersonsAsync() {
            return base.Channel.GetAllPersonsAsync();
        }
        
        public MyPhotos.DataAccess.Gui.ServiceReference1.Person GetPersonById(System.Guid id) {
            return base.Channel.GetPersonById(id);
        }
        
        public System.Threading.Tasks.Task<MyPhotos.DataAccess.Gui.ServiceReference1.Person> GetPersonByIdAsync(System.Guid id) {
            return base.Channel.GetPersonByIdAsync(id);
        }
        
        public void UpdatePerson(MyPhotos.DataAccess.Gui.ServiceReference1.Person oldEntity, MyPhotos.DataAccess.Gui.ServiceReference1.Person newEntity) {
            base.Channel.UpdatePerson(oldEntity, newEntity);
        }
        
        public System.Threading.Tasks.Task UpdatePersonAsync(MyPhotos.DataAccess.Gui.ServiceReference1.Person oldEntity, MyPhotos.DataAccess.Gui.ServiceReference1.Person newEntity) {
            return base.Channel.UpdatePersonAsync(oldEntity, newEntity);
        }
        
        public void DeletePerson(System.Guid id) {
            base.Channel.DeletePerson(id);
        }
        
        public System.Threading.Tasks.Task DeletePersonAsync(System.Guid id) {
            return base.Channel.DeletePersonAsync(id);
        }
        
        public void AddPhoto(MyPhotos.DataAccess.Gui.ServiceReference1.Photos entity) {
            base.Channel.AddPhoto(entity);
        }
        
        public System.Threading.Tasks.Task AddPhotoAsync(MyPhotos.DataAccess.Gui.ServiceReference1.Photos entity) {
            return base.Channel.AddPhotoAsync(entity);
        }
        
        public MyPhotos.DataAccess.Gui.ServiceReference1.Photos[] GetAllPhotos() {
            return base.Channel.GetAllPhotos();
        }
        
        public System.Threading.Tasks.Task<MyPhotos.DataAccess.Gui.ServiceReference1.Photos[]> GetAllPhotosAsync() {
            return base.Channel.GetAllPhotosAsync();
        }
        
        public MyPhotos.DataAccess.Gui.ServiceReference1.Photos GetPhotoById(System.Guid id) {
            return base.Channel.GetPhotoById(id);
        }
        
        public System.Threading.Tasks.Task<MyPhotos.DataAccess.Gui.ServiceReference1.Photos> GetPhotoByIdAsync(System.Guid id) {
            return base.Channel.GetPhotoByIdAsync(id);
        }
        
        public void UpdatePhoto(MyPhotos.DataAccess.Gui.ServiceReference1.Photos oldEntity, MyPhotos.DataAccess.Gui.ServiceReference1.Photos newEntity) {
            base.Channel.UpdatePhoto(oldEntity, newEntity);
        }
        
        public System.Threading.Tasks.Task UpdatePhotoAsync(MyPhotos.DataAccess.Gui.ServiceReference1.Photos oldEntity, MyPhotos.DataAccess.Gui.ServiceReference1.Photos newEntity) {
            return base.Channel.UpdatePhotoAsync(oldEntity, newEntity);
        }
        
        public void DeletePhoto(System.Guid id) {
            base.Channel.DeletePhoto(id);
        }
        
        public System.Threading.Tasks.Task DeletePhotoAsync(System.Guid id) {
            return base.Channel.DeletePhotoAsync(id);
        }
        
        public void AddPlace(MyPhotos.DataAccess.Gui.ServiceReference1.Places entity) {
            base.Channel.AddPlace(entity);
        }
        
        public System.Threading.Tasks.Task AddPlaceAsync(MyPhotos.DataAccess.Gui.ServiceReference1.Places entity) {
            return base.Channel.AddPlaceAsync(entity);
        }
        
        public MyPhotos.DataAccess.Gui.ServiceReference1.Places[] GetAllPlaces() {
            return base.Channel.GetAllPlaces();
        }
        
        public System.Threading.Tasks.Task<MyPhotos.DataAccess.Gui.ServiceReference1.Places[]> GetAllPlacesAsync() {
            return base.Channel.GetAllPlacesAsync();
        }
        
        public MyPhotos.DataAccess.Gui.ServiceReference1.Places GetPlaceById(System.Guid id) {
            return base.Channel.GetPlaceById(id);
        }
        
        public System.Threading.Tasks.Task<MyPhotos.DataAccess.Gui.ServiceReference1.Places> GetPlaceByIdAsync(System.Guid id) {
            return base.Channel.GetPlaceByIdAsync(id);
        }
        
        public void UpdatePlace(MyPhotos.DataAccess.Gui.ServiceReference1.Places oldEntity, MyPhotos.DataAccess.Gui.ServiceReference1.Places newEntity) {
            base.Channel.UpdatePlace(oldEntity, newEntity);
        }
        
        public System.Threading.Tasks.Task UpdatePlaceAsync(MyPhotos.DataAccess.Gui.ServiceReference1.Places oldEntity, MyPhotos.DataAccess.Gui.ServiceReference1.Places newEntity) {
            return base.Channel.UpdatePlaceAsync(oldEntity, newEntity);
        }
        
        public void DeletePlace(System.Guid id) {
            base.Channel.DeletePlace(id);
        }
        
        public System.Threading.Tasks.Task DeletePlaceAsync(System.Guid id) {
            return base.Channel.DeletePlaceAsync(id);
        }
        
        public void AddType(MyPhotos.DataAccess.Gui.ServiceReference1.Type entity) {
            base.Channel.AddType(entity);
        }
        
        public System.Threading.Tasks.Task AddTypeAsync(MyPhotos.DataAccess.Gui.ServiceReference1.Type entity) {
            return base.Channel.AddTypeAsync(entity);
        }
        
        public MyPhotos.DataAccess.Gui.ServiceReference1.Type[] GetAllTypes() {
            return base.Channel.GetAllTypes();
        }
        
        public System.Threading.Tasks.Task<MyPhotos.DataAccess.Gui.ServiceReference1.Type[]> GetAllTypesAsync() {
            return base.Channel.GetAllTypesAsync();
        }
        
        public MyPhotos.DataAccess.Gui.ServiceReference1.Type GetTypeById(System.Guid id) {
            return base.Channel.GetTypeById(id);
        }
        
        public System.Threading.Tasks.Task<MyPhotos.DataAccess.Gui.ServiceReference1.Type> GetTypeByIdAsync(System.Guid id) {
            return base.Channel.GetTypeByIdAsync(id);
        }
        
        public void UpdateType(MyPhotos.DataAccess.Gui.ServiceReference1.Type oldEntity, MyPhotos.DataAccess.Gui.ServiceReference1.Type newEntity) {
            base.Channel.UpdateType(oldEntity, newEntity);
        }
        
        public System.Threading.Tasks.Task UpdateTypeAsync(MyPhotos.DataAccess.Gui.ServiceReference1.Type oldEntity, MyPhotos.DataAccess.Gui.ServiceReference1.Type newEntity) {
            return base.Channel.UpdateTypeAsync(oldEntity, newEntity);
        }
        
        public void DeleteType(System.Guid id) {
            base.Channel.DeleteType(id);
        }
        
        public System.Threading.Tasks.Task DeleteTypeAsync(System.Guid id) {
            return base.Channel.DeleteTypeAsync(id);
        }
    }
}
